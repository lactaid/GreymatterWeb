<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Production Chart</title>
    <script src="/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@^2"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@^1"></script>
    <link rel="stylesheet" href="/bootstrap/bstyle.css" crossorigin="anonymous">
</head>
<body>
    <div class="container">
        <h2>Machines available</h2>
        <div class="row">
          <div class="col-md-4">
            <div id="machine-container" class="list-group">
                <script>
                    fetch('/production/machines')
                    .then(response => response.json())
                    .then(data => {
                        // Generate buttons dynamically
                        const listGroupContainer = document.getElementById('machine-container');
                        for (let i = 0; i < data.machineid.length; i++) {
                            const buttonElement = document.createElement('a');
                            buttonElement.href = '#';
                            buttonElement.className = 'list-group-item list-group-item-action';
                            buttonElement.textContent = `Machine ${data.machineid[i]} - ${data.machinestate[i]}`;
                            buttonElement.addEventListener('click', function(event) {
                            // Access the ID and button text
                            const machineId = data.machineid[i];
                            newValue = machineId
                            updateChart(newValue)
                        });
                            listGroupContainer.appendChild(buttonElement);
                        };
                    })
                    .catch(error => console.error('Error fetching button names:', error));
                </script>
            </div>
          </div>
          <div class="col-md-8">
            <canvas id="myChart" width="200" height="200"></canvas>
            <script>
                var newValue = 1;
                var ctx = document.getElementById('myChart').getContext('2d');
                var chartConfig = {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'Production',
                            data: [],
                            fill: false,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0
                        }]
                    },
                    options: {
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                unit: 'hour'
                                }
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    },
                    plugins: {
                        adapter: {
                            date: {
                                locale: 'es', // Opcional: puedes configurar la localización
                        },
                        },
                    },
                };
                var myChart = new Chart(ctx, chartConfig );

                function updateChart() {
                    fetch(`/production/data/${newValue}`)
                    .then(response => response.json())
                    .then(data => {
                        myChart.data.labels = data.xData;
                        myChart.data.datasets[0].data = data.yData;
                        myChart.update();
                    })
                    .catch(error => console.error('Error fetching data:', error));
                }

                // Actualizar la gráfica cada 5 segundos
                setInterval(() => {
                    updateChart(newValue);
                    }, 5000)
            </script>
          </div>
        </div>
    </div>

</body>
</html>